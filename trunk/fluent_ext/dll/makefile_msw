#
#
#
#
#
SHELL = cmd.exe

SRC = ./src/

#
include user_nt.udf

# These need to be updated for each release.
LIB_RELEASE = 6326
RELEASE = 6.3.26
#LIB_RELEASE = 1212
#RELEASE = 12.1.2

# it is assumed $(FLUENT_INC)is already set.
ifndef FLUENT_INC
  ERROR You need to define the environmental variable FLUENT_INC.
endif

ifeq ("$(PROCESSOR_ARCHITECTURE)", "ALPHA")
FLUENT_ARCH = ntalpha
endif

ifeq ("$(PROCESSOR_ARCHITECTURE)", "x86")
FLUENT_ARCH = ntx86
endif

ifeq ("$(PROCESSOR_ARCHITECTURE)", "AMD64")
FLUENT_ARCH = win64 
endif


# set FLUENT_LIB based on VERSION macro

ifeq ("host", $(findstring $(VERSION), host))
  FLUENT_LIB =  fl$(LIB_RELEASE)
else 
  ifeq ("node", $(findstring $(VERSION), host))
    ifneq ($(PARALLEL_NODE)", "none")
     ifneq ("$(PARALLEL_NODE)","net")
       PARALLEL_NODE = mpi
     endif
    endif
   FLUENT_LIB = fl_$(PARALLEL_NODE)$(LIB_RELEASE)
  else
   FLUENT_LIB = fl$(LIB_RELEASE)s
  endif
endif

###########################################################


CC  = gcc
CXX = g++

SED_CMD = $(FLUENT_INC)\ntbin\$(FLUENT_ARCH)\sed.exe
FLUENT_CMD = $(FLUENT_INC)\ntbin\$(FLUENT_ARCH)\fluent $version

#
LUA_DIR = 

# compile flags 
CFLAGS = -c -fpic -ansi -Wall -DUDF_EXPORTING

LDFLAGS = -shared
TARGET = libhylab.dll
TARGET_DIR = $(TARGET:.dll=)
UDFDATA = udf_names.c

# generate object names from source names
SOURCES2 = $(SOURCES:./src/%.c=%.c)
SRC_OBJECT = $(SOURCES2:%.c=%.o)

UDF_OBJECT = $(UDFDATA:%.c=%.o)

MISC_SRCS =
MISC_SRCS2 = $(MISC_SRCS:./src/%.c=%.c)
MISC_OBJS = $(MISC_SRCS2:%.c=%.o)

CPP_SRCS =
CPP_SRCS2 = $(CPP_SRCS:./src/%.cpp=%.cpp)
CPP_OBJS = $(CPP_SRCS2:%.cpp=%.o)

RCC = windres -DMINGW_RC

RES_DIR = .\res
RC_FILE =
RES_FILE = $(RC_FILE:.rc=.res)

OBJECTS = $(UDF_OBJECT) $(SRC_OBJECT) $(USER_OBJECTS) $(MISC_OBJS) $(CPP_OBJS)

INCLUDES= -I$(FLUENT_INC)\fluent$(RELEASE)\$(FLUENT_ARCH)\$(VERSION) \
          -I$(FLUENT_INC)\fluent$(RELEASE)\src \
          -I$(FLUENT_INC)\fluent$(RELEASE)\cortex\src \
          -I$(FLUENT_INC)\fluent$(RELEASE)\client\src \
          -I$(FLUENT_INC)\fluent$(RELEASE)\tgrid\src \
          -I$(FLUENT_INC)\fluent$(RELEASE)\multiport\src \
          -I$(RES_DIR)

LIBS = -L..\..\fluent_udf\hylab\lib\fluent$(RELEASE)\$(FLUENT_ARCH)\$(VERSION) -l$(FLUENT_LIB)


default:   $(TARGET)
	echo $(UDF_OBJECT) $(SRC_OBJECT) $(USER_OBJECTS) $(MISC_OBJS) $(CPP_OBJS)
	@if not exist $(TARGET_DIR) mkdir $(TARGET_DIR)
	@if not exist $(TARGET_DIR)\$(FLUENT_ARCH) mkdir $(TARGET_DIR)\$(FLUENT_ARCH)
	@if not exist $(TARGET_DIR)\$(FLUENT_ARCH)\$(VERSION) mkdir $(TARGET_DIR)\$(FLUENT_ARCH)\$(VERSION)
	@copy /B /Y $(TARGET) $(TARGET_DIR)\$(FLUENT_ARCH)\$(VERSION)\libudf.dll
    

$(UDF_OBJECT): $(UDFDATA)
	$(CC) $(CFLAGS) $(INCLUDES) $^

$(SRC_OBJECT): $(SOURCES)
	$(CC) $(CFLAGS) $(INCLUDES) $^
    
$(MISC_OBJS) : $(MISC_SRCS)
	$(CC) $(CFLAGS) $(INCLUDES) $^

$(CPP_OBJS) : $(CPP_SRCS)
	$(CXX) $(CFLAGS) $(INCLUDES) $^

    
$(RES_FILE) : $(RC_FILE)
	$(RCC) -i $< -o $@ -O coff -I"./res" -I"./src"
	
$(TARGET): makefile_msw user_nt.udf $(UDF_OBJECT) $(SRC_OBJECT) $(MISC_OBJS) $(CPP_OBJS) $(RES_FILE)
	@echo # Linking $@ because of $?
	$(CC)  $(LDFLAGS) -o $(TARGET) $(OBJECTS) $(LIBS) $(RES_FILE)
	
$(UDFDATA): makefile_msw $(SRC_OBJECT)
	@echo # Generating $@ because of $?
	@echo /* This file generated automatically. */ > $@
	@echo /*          Do not modify.            */ >> $@
	@echo #include "udf.h" >> $@
	@echo #include "prop.h" >> $@
	@echo #include "dpm.h" >> $@
	@$(SED_CMD) -n "s/^\(DEFINE_[_A-Z]*(.*)\)/extern \1;/p" $(SOURCES) >> $@
	@echo __declspec(dllexport) UDF_Data udf_data[] = { >> $@
	@$(SED_CMD) -n "s/^DEFINE_\([_A-Z]*\)( *\([_a-zA-Z0-9]*\).*)/\{\"\2\", (void (*)())\2, UDF_TYPE_\1\},/p" $(SOURCES) >> $@
	@echo }; >> $@
	@echo __declspec(dllexport) int n_udf_data = sizeof(udf_data)/sizeof(UDF_Data); >> $@
	@echo #include "version.h" >> $@
	@echo __declspec(dllexport) void UDF_Inquire_Release(int *major, int *minor, int *revision) >> $@
	@echo { >> $@
	@echo   *major = RampantReleaseMajor; >> $@
	@echo   *minor = RampantReleaseMinor; >> $@
	@echo   *revision = RampantReleaseRevision; >> $@
	@echo } >> $@
	

clean:
	@rm -vf *.dll *.o *.def *.a *.c
    
run:
	@$(FLUENT_CMD)
