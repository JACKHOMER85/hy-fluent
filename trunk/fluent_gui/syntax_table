;;;
;;;  system-global-syntax-table
;;;
;;;  syntax-table-define
;;;
(
  (cx-with-open-varenv . #[compound-procedure])
  (make-menu . #[compound-procedure])
  (make-menu-item . #[compound-procedure])
  (err-protect-mt . #[compound-procedure])
  (err-protect . #[compound-procedure])
  (declare . #[compound-procedure])
  (>= . #[compound-procedure])
  (<= . #[compound-procedure])
  (do . #[compound-procedure])
  (macro . #[compound-procedure])
  (case . #[compound-procedure])
  (cond . #[compound-procedure])
  (quasiquote . #[compound-procedure])
  (letrec . #[compound-procedure])
  (let* . #[compound-procedure])
  (let . #[compound-procedure])
  (define . #[compound-procedure])
  (> . #[compound-procedure])
  (< . #[compound-procedure])
  (= . #[compound-procedure])
  (/ . #[compound-procedure])
  (* . #[compound-procedure])
  (- . #[compound-procedure])
  (+ . #[compound-procedure])
  (general-car-cdr . #[compound-procedure])
  (cddddr . #[compound-procedure])
  (cdddar . #[compound-procedure])
  (cddadr . #[compound-procedure])
  (cddaar . #[compound-procedure])
  (cdaddr . #[compound-procedure])
  (cdadar . #[compound-procedure])
  (cdaadr . #[compound-procedure])
  (cdaaar . #[compound-procedure])
  (cadddr . #[compound-procedure])
  (caddar . #[compound-procedure])
  (cadadr . #[compound-procedure])
  (cadaar . #[compound-procedure])
  (caaddr . #[compound-procedure])
  (caadar . #[compound-procedure])
  (caaadr . #[compound-procedure])
  (caaaar . #[compound-procedure])
  (cdddr . #[compound-procedure])
  (cddar . #[compound-procedure])
  (cdadr . #[compound-procedure])
  (cdaar . #[compound-procedure])
  (caddr . #[compound-procedure])
  (cadar . #[compound-procedure])
  (caadr . #[compound-procedure])
  (caaar . #[compound-procedure])
  (cddr . #[compound-procedure])
  (cdar . #[compound-procedure])
  (cadr . #[compound-procedure])
  (caar . #[compound-procedure])
  (set-cdr! . #[compound-procedure])
  (set-car! . #[compound-procedure])
  (car . #[compound-procedure])
  (assv . #[compound-procedure])
  (assq . #[compound-procedure])
  (memv . #[compound-procedure])
  (memq . #[compound-procedure])
  (eqv? . #[compound-procedure])
  (eq? . #[compound-procedure])
  (pair? . #[compound-procedure])
  (null? . #[compound-procedure])
  (not . #[compound-procedure])
  (or . #[compound-procedure])
  (and . #[compound-procedure])
  (apply . #[compound-procedure])
  (set! . #[compound-procedure])
  (list . #[compound-procedure])
  (if . #[compound-procedure])
  (begin . #[compound-procedure])
  (lambda . #[compound-procedure])
  (cdr . #[compound-procedure])
  (cons . #[compound-procedure])
  (%let . #[compound-procedure])
  (require . #[compound-procedure])
  (provide . #[compound-procedure])
  (load . #[compound-procedure])
)
